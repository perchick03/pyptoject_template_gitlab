[MASTER]

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore=_version.py

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=pylint.extensions.docparams


[MESSAGES CONTROL]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time. See also the "--disable" option for examples.
#enable=c-extension-no-member

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"
# F0401: Unable to import %s
# W0141: usage of "map"
# W0611: Unused import %s
# W0110: map/filter on lambda could be replaced by comprehension
# W0703: catching Exception
# W0142: usage of "*" or "**"
# W0401: Wildcard import %s
# E0602: Undefined variable %r
# C0326: %s space %s %s %s\n%s
# C0116: missing-function-docstring
# C0115: missing-class-docstring
# C0114: missing-module-docstring
# W0614: Unused import %s from wildcard import
# C0103: invalid-name
# C0111: missing docstring
# W1113: keyword-arg-before-vararg
# R0903: too-few-public-methods
# E1101: no-member. this works really bad and have a lot of false errors
# W0105: pointless-string-statement. string headers ('''MESSAGE''') in the middle of the file should not be blocked
# R0201: (no-self-use): method could be a function error. we don't always want that
# E0611: no-name-in-module: too much false positive
# C0411: wrong-import-order: too much false positive on different machines
# F0401, W0611, W0703, W0401, E0602, C0116, C0115, C0114, W0614, C0103, C0111, W1113, R0903, E1101, W0105, E0611, C0411

# C0111: missing docstring
# R0903: too-few-public-methods
# W1203: logging-fstring-interpolation Use lazy % formatting in logging functions
disable=C0111,R0903,W1203


[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=msvs


# Tells whether to display a full report or only the messages
reports=yes

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the massage information. See doc for all details
#msg-template=


[BASIC]


# Regular expression which should only match correct module names
module-naming-style=snake_case

# Regular expression which should only match correct module level names
const-naming-style=UPPER_CASE

# Regular expression which should only match correct class names
class-naming-style=PascalCase

# Regular expression which should only match correct function names
function-naming-style=snake_case

# Regular expression which should only match correct method names
method-naming-style=snake_case

# Regular expression which should only match correct instance attribute names
attr-naming-style=snake_case

# Regular expression which should only match correct argument names
argument-naming-style=snake_case

# Regular expression which should only match correct variable names
variable-naming-style=snake_case

# Regular expression which should only match correct attribute names in class
# bodies
class-attribute-rgx=UPPER_CASE

# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=snake_case

# Good variable names which should always be accepted, separated by a comma
good-names=inx,ind,lp,lr,ex,Run,_

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=__.*__

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1


[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
init-import=yes

# A regular expression matching the beginning of the name of dummy variables
# (i.e. not used).
dummy-variables-rgx=_|dummy

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=


[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=yes


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=

[FORMAT]

# Maximum number of characters on a single line.
max-line-length=180

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '

[SPELLING]

# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions=4

# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package..
spelling-dict=

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words=no


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes=FP16_Optimizer,torch,

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis. It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules=torch.tensor,torch,


# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed. Python regular
# expressions are accepted.
generated-members=REQUEST,acl_users,aq_parent,


[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph= #gr.dot

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph= #erg.dot

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph= #igr.dot


[DESIGN]

# Maximum number of arguments for function / method
max-args=6

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
max-locals=15

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Minimum number of public methods for a class (see R0903).
min-public-methods=2

# Maximum number of public methods for a class (see R0904).
max-public-methods=20


[CLASSES]


# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=builtins.BaseException,
                       builtins.Exception
